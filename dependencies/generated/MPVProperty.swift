// This file is auto-generated by Scripts/parse_doc.rb, do not modify! 
// Generated at 16/11/2017 14:24

import Foundation
extension MPV {
    public enum Property {
        /** audio-speed-correction */
        case audioSpeedCorrection
        /** video-speed-correction */
        case videoSpeedCorrection
        /** display-sync-active */
        case displaySyncActive
        /** filename */
        case filename(Filename)

        public enum Filename {
            case filename
            /** filename/no-ext */
            case noExt
            /** string value */
            var rawValue: String {
                switch self {
                case .noExt: return "filename/no-ext"
                case .filename: return "filename"
                }
            }
        }
        /** file-size */
        case fileSize
        /** estimated-frame-count */
        case estimatedFrameCount
        /** estimated-frame-number */
        case estimatedFrameNumber
        /** path */
        case path
        /** media-title */
        case mediaTitle
        /** file-format */
        case fileFormat
        /** current-demuxer */
        case currentDemuxer
        /** stream-path */
        case streamPath
        /** stream-pos */
        case streamPos
        /** stream-end */
        case streamEnd
        /** duration */
        case duration
        /** avsync */
        case avsync
        /** total-avsync-change */
        case totalAvsyncChange
        /** decoder-frame-drop-count */
        case decoderFrameDropCount
        /** frame-drop-count */
        case frameDropCount
        /** mistimed-frame-count */
        case mistimedFrameCount
        /** vsync-ratio */
        case vsyncRatio
        /** vo-delayed-frame-count */
        case voDelayedFrameCount
        /** percent-pos */
        case percentPos
        /** time-pos */
        case timePos
        /** time-start */
        case timeStart
        /** time-remaining */
        case timeRemaining
        /** audio-pts */
        case audioPts
        /** playtime-remaining */
        case playtimeRemaining
        /** playback-time */
        case playbackTime
        /** chapter */
        case chapter
        /** edition */
        case edition
        /** disc-titles */
        case discTitles(Disctitles)

        public enum Disctitles {
            case discTitles
            /** disc-titles/count */
            case count
            /** disc-titles/id */
            case id
            /** disc-titles/length */
            case length
            /** string value */
            var rawValue: String {
                switch self {
                case .count: return "disc-titles/count"
                case .id: return "disc-titles/id"
                case .length: return "disc-titles/length"
                case .discTitles: return "disc-titles"
                }
            }
        }
        /** disc-title-list */
        case discTitleList
        /** disc-title */
        case discTitle
        /** chapters */
        case chapters
        /** editions */
        case editions
        /** edition-list */
        case editionList(Editionlist)

        public enum Editionlist {
            case editionList
            /** edition-list/count */
            case count
            /** edition-list/N/id */
            case nId(Int)
            /** edition-list/N/default */
            case nDefault(Int)
            /** edition-list/N/title */
            case nTitle(Int)
            /** string value */
            var rawValue: String {
                switch self {
                case .count: return "edition-list/count"
                case let .nId(n): return "edition-list/\(n)/id"
                case let .nDefault(n): return "edition-list/\(n)/default"
                case let .nTitle(n): return "edition-list/\(n)/title"
                case .editionList: return "edition-list"
                }
            }
        }
        /** angle */
        case angle
        /** metadata */
        case metadata(Metadata)

        public enum Metadata {
            case metadata
            /** metadata/list/count */
            case listCount
            /** metadata/list/N/key */
            case listNKey(Int)
            /** metadata/list/N/value */
            case listNValue(Int)
            /** string value */
            var rawValue: String {
                switch self {
                case .listCount: return "metadata/list/count"
                case let .listNKey(n): return "metadata/list/\(n)/key"
                case let .listNValue(n): return "metadata/list/\(n)/value"
                case .metadata: return "metadata"
                }
            }
        }
        /** filtered-metadata */
        case filteredMetadata
        /** chapter-metadata */
        case chapterMetadata
        /** vf-metadata/<filter-label> */
        /** af-metadata/<filter-label> */
        /** idle-active */
        case idleActive
        /** core-idle */
        case coreIdle
        /** cache */
        case cache
        /** demuxer-cache-duration */
        case demuxerCacheDuration
        /** demuxer-cache-time */
        case demuxerCacheTime
        /** demuxer-cache-idle */
        case demuxerCacheIdle
        /** demuxer-via-network */
        case demuxerViaNetwork
        /** demuxer-start-time */
        case demuxerStartTime
        /** paused-for-cache */
        case pausedForCache
        /** cache-buffering-state */
        case cacheBufferingState
        /** eof-reached */
        case eofReached
        /** seeking */
        case seeking
        /** mixer-active */
        case mixerActive
        /** ao-volume */
        case aoVolume
        /** ao-mute */
        case aoMute
        /** audio-codec */
        case audioCodec
        /** audio-params */
        case audioParams(Audioparams)

        public enum Audioparams {
            case audioParams
            /** audio-params/format */
            case format
            /** audio-params/samplerate */
            case samplerate
            /** audio-params/channels */
            case channels
            /** audio-params/hr-channels */
            case hrChannels
            /** audio-params/channel-count */
            case channelCount
            /** string value */
            var rawValue: String {
                switch self {
                case .format: return "audio-params/format"
                case .samplerate: return "audio-params/samplerate"
                case .channels: return "audio-params/channels"
                case .hrChannels: return "audio-params/hr-channels"
                case .channelCount: return "audio-params/channel-count"
                case .audioParams: return "audio-params"
                }
            }
        }
        /** audio-out-params */
        case audioOutParams
        /** colormatrix */
        case colormatrix
        /** hwdec */
        case hwdec
        /** video-format */
        case videoFormat
        /** video-codec */
        case videoCodec
        /** width */
        case width
        /** height */
        case height
        /** video-params */
        case videoParams(Videoparams)

        public enum Videoparams {
            case videoParams
            /** video-params/pixelformat */
            case pixelformat
            /** video-params/average-bpp */
            case averageBpp
            /** video-params/plane-depth */
            case planeDepth
            /** video-params/w */
            case w
            /** video-params/h */
            case h
            /** video-params/dw */
            case dw
            /** video-params/dh */
            case dh
            /** video-params/aspect */
            case aspect
            /** video-params/par */
            case par
            /** video-params/colormatrix */
            case colormatrix
            /** video-params/colorlevels */
            case colorlevels
            /** video-params/primaries */
            case primaries
            /** video-params/gamma */
            case gamma
            /** video-params/sig-peak */
            case sigPeak
            /** video-params/light */
            case light
            /** video-params/chroma-location */
            case chromaLocation
            /** video-params/rotate */
            case rotate
            /** video-params/stereo-in */
            case stereoIn
            /** string value */
            var rawValue: String {
                switch self {
                case .pixelformat: return "video-params/pixelformat"
                case .averageBpp: return "video-params/average-bpp"
                case .planeDepth: return "video-params/plane-depth"
                case .w: return "video-params/w"
                case .h: return "video-params/h"
                case .dw: return "video-params/dw"
                case .dh: return "video-params/dh"
                case .aspect: return "video-params/aspect"
                case .par: return "video-params/par"
                case .colormatrix: return "video-params/colormatrix"
                case .colorlevels: return "video-params/colorlevels"
                case .primaries: return "video-params/primaries"
                case .gamma: return "video-params/gamma"
                case .sigPeak: return "video-params/sig-peak"
                case .light: return "video-params/light"
                case .chromaLocation: return "video-params/chroma-location"
                case .rotate: return "video-params/rotate"
                case .stereoIn: return "video-params/stereo-in"
                case .videoParams: return "video-params"
                }
            }
        }
        /** dwidth */
        case dwidth
        /** dheight */
        case dheight
        /** video-dec-params */
        case videoDecParams
        /** video-out-params */
        case videoOutParams
        /** video-frame-info */
        case videoFrameInfo
        /** container-fps */
        case containerFps
        /** estimated-vf-fps */
        case estimatedVfFps
        /** window-scale */
        case windowScale
        /** window-minimized */
        case windowMinimized
        /** display-names */
        case displayNames
        /** display-fps */
        case displayFps
        /** estimated-display-fps */
        case estimatedDisplayFps
        /** vsync-jitter */
        case vsyncJitter
        /** video-aspect */
        case videoAspect
        /** osd-width */
        case osdWidth
        /** osd-height */
        case osdHeight
        /** osd-par */
        case osdPar
        /** program */
        case program
        /** dvb-channel */
        case dvbChannel
        /** sub-text */
        case subText
        /** tv-brightness */
        case tvBrightness
        /** tv-contrast */
        case tvContrast
        /** tv-saturation */
        case tvSaturation
        /** tv-hue */
        case tvHue
        /** playlist-pos */
        case playlistPos
        /** playlist-count */
        case playlistCount
        /** playlist */
        case playlist(Playlist)

        public enum Playlist {
            case playlist
            /** playlist/count */
            case count
            /** playlist/N/filename */
            case nFilename(Int)
            /** playlist/N/current */
            case nCurrent(Int)
            /** playlist/N/playing */
            case nPlaying(Int)
            /** playlist/N/title */
            case nTitle(Int)
            /** string value */
            var rawValue: String {
                switch self {
                case .count: return "playlist/count"
                case let .nFilename(n): return "playlist/\(n)/filename"
                case let .nCurrent(n): return "playlist/\(n)/current"
                case let .nPlaying(n): return "playlist/\(n)/playing"
                case let .nTitle(n): return "playlist/\(n)/title"
                case .playlist: return "playlist"
                }
            }
        }
        /** track-list */
        case trackList(Tracklist)

        public enum Tracklist {
            case trackList
            /** track-list/count */
            case count
            /** track-list/N/id */
            case nId(Int)
            /** track-list/N/type */
            case nType(Int)
            /** track-list/N/src-id */
            case nSrcId(Int)
            /** track-list/N/title */
            case nTitle(Int)
            /** track-list/N/lang */
            case nLang(Int)
            /** track-list/N/albumart */
            case nAlbumart(Int)
            /** track-list/N/default */
            case nDefault(Int)
            /** track-list/N/forced */
            case nForced(Int)
            /** track-list/N/codec */
            case nCodec(Int)
            /** track-list/N/external */
            case nExternal(Int)
            /** track-list/N/external-filename */
            case nExternalFilename(Int)
            /** track-list/N/selected */
            case nSelected(Int)
            /** track-list/N/ff-index */
            case nFfIndex(Int)
            /** track-list/N/decoder-desc */
            case nDecoderDesc(Int)
            /** track-list/N/demux-w */
            case nDemuxW(Int)
            /** track-list/N/demux-h */
            case nDemuxH(Int)
            /** track-list/N/demux-channel-count */
            case nDemuxChannelCount(Int)
            /** track-list/N/demux-channels */
            case nDemuxChannels(Int)
            /** track-list/N/demux-samplerate */
            case nDemuxSamplerate(Int)
            /** track-list/N/demux-fps */
            case nDemuxFps(Int)
            /** track-list/N/audio-channels */
            case nAudioChannels(Int)
            /** track-list/N/replaygain-track-peak */
            case nReplaygainTrackPeak(Int)
            /** track-list/N/replaygain-track-gain */
            case nReplaygainTrackGain(Int)
            /** track-list/N/replaygain-album-peak */
            case nReplaygainAlbumPeak(Int)
            /** track-list/N/replaygain-album-gain */
            case nReplaygainAlbumGain(Int)
            /** string value */
            var rawValue: String {
                switch self {
                case .count: return "track-list/count"
                case let .nId(n): return "track-list/\(n)/id"
                case let .nType(n): return "track-list/\(n)/type"
                case let .nSrcId(n): return "track-list/\(n)/src-id"
                case let .nTitle(n): return "track-list/\(n)/title"
                case let .nLang(n): return "track-list/\(n)/lang"
                case let .nAlbumart(n): return "track-list/\(n)/albumart"
                case let .nDefault(n): return "track-list/\(n)/default"
                case let .nForced(n): return "track-list/\(n)/forced"
                case let .nCodec(n): return "track-list/\(n)/codec"
                case let .nExternal(n): return "track-list/\(n)/external"
                case let .nExternalFilename(n): return "track-list/\(n)/external-filename"
                case let .nSelected(n): return "track-list/\(n)/selected"
                case let .nFfIndex(n): return "track-list/\(n)/ff-index"
                case let .nDecoderDesc(n): return "track-list/\(n)/decoder-desc"
                case let .nDemuxW(n): return "track-list/\(n)/demux-w"
                case let .nDemuxH(n): return "track-list/\(n)/demux-h"
                case let .nDemuxChannelCount(n): return "track-list/\(n)/demux-channel-count"
                case let .nDemuxChannels(n): return "track-list/\(n)/demux-channels"
                case let .nDemuxSamplerate(n): return "track-list/\(n)/demux-samplerate"
                case let .nDemuxFps(n): return "track-list/\(n)/demux-fps"
                case let .nAudioChannels(n): return "track-list/\(n)/audio-channels"
                case let .nReplaygainTrackPeak(n): return "track-list/\(n)/replaygain-track-peak"
                case let .nReplaygainTrackGain(n): return "track-list/\(n)/replaygain-track-gain"
                case let .nReplaygainAlbumPeak(n): return "track-list/\(n)/replaygain-album-peak"
                case let .nReplaygainAlbumGain(n): return "track-list/\(n)/replaygain-album-gain"
                case .trackList: return "track-list"
                }
            }
        }
        /** chapter-list */
        case chapterList(Chapterlist)

        public enum Chapterlist {
            case chapterList
            /** chapter-list/count */
            case count
            /** chapter-list/N/title */
            case nTitle(Int)
            /** chapter-list/N/time */
            case nTime(Int)
            /** string value */
            var rawValue: String {
                switch self {
                case .count: return "chapter-list/count"
                case let .nTitle(n): return "chapter-list/\(n)/title"
                case let .nTime(n): return "chapter-list/\(n)/time"
                case .chapterList: return "chapter-list"
                }
            }
        }
        /** af */
        case af
        /** vf */
        case vf
        /** seekable */
        case seekable
        /** partially-seekable */
        case partiallySeekable
        /** playback-abort */
        case playbackAbort
        /** cursor-autohide */
        case cursorAutohide
        /** osd-sym-cc */
        case osdSymCc
        /** osd-ass-cc */
        case osdAssCc
        /** vo-configured */
        case voConfigured
        /** vo-passes */
        case voPasses(Vopasses)

        public enum Vopasses {
            case voPasses
            /** vo-passes/TYPE/count */
            case typecount(String)
            /** vo-passes/TYPE/N/desc */
            case typeNDesc(String, Int)
            /** vo-passes/TYPE/N/last */
            case typeNLast(String, Int)
            /** vo-passes/TYPE/N/avg */
            case typeNAvg(String, Int)
            /** vo-passes/TYPE/N/peak */
            case typeNPeak(String, Int)
            /** vo-passes/TYPE/N/count */
            case typeNCount(String, Int)
            /** vo-passes/TYPE/N/samples/M */
            case typeNSamplesM(String, Int)
            /** string value */
            var rawValue: String {
                switch self {
                case let .typecount(type): return "vo-passes/\(type)/count"
                case let .typeNDesc(type, n): return "vo-passes/\(type)/\(n)/desc"
                case let .typeNLast(type, n): return "vo-passes/\(type)/\(n)/last"
                case let .typeNAvg(type, n): return "vo-passes/\(type)/\(n)/avg"
                case let .typeNPeak(type, n): return "vo-passes/\(type)/\(n)/peak"
                case let .typeNCount(type, n): return "vo-passes/\(type)/\(n)/count"
                case let .typeNSamplesM(type, n): return "vo-passes/\(type)/\(n)/samples/M"
                case .voPasses: return "vo-passes"
                }
            }
        }
        /** video-bitrate */
        case videoBitrate
        /** audio-bitrate */
        case audioBitrate
        /** sub-bitrate */
        case subBitrate
        /** packet-video-bitrate */
        case packetVideoBitrate
        /** packet-audio-bitrate */
        case packetAudioBitrate
        /** packet-sub-bitrate */
        case packetSubBitrate
        /** audio-device-list */
        case audioDeviceList
        /** audio-device */
        case audioDevice
        /** current-vo */
        case currentVo
        /** current-ao */
        case currentAo
        /** audio-out-detected-device */
        case audioOutDetectedDevice
        /** working-directory */
        case workingDirectory
        /** protocol-list */
        case protocolList
        /** decoder-list */
        case decoderList
        /** family */
        case family
        /** codec */
        case codec
        /** driver */
        case driver
        /** description */
        case description
        /** encoder-list */
        case encoderList
        /** mpv-version */
        case mpvVersion
        /** mpv-configuration */
        case mpvConfiguration
        /** ffmpeg-version */
        case ffmpegVersion
        /** options/<name> */
        case options(String)
        /** file-local-options/<name> */
        case fileLocalOptions(String)
        /** option-info/<name> */
        case optionInfo(Optioninfo)

        public enum Optioninfo {
            case optionInfo
            /** option-info/<name>/name */
            case optionInfoName(String)
            /** option-info/<name>/type */
            case optionInfoType(String)
            /** option-info/<name>/set-from-commandline */
            case optionInfoSetFromCommandline(String)
            /** option-info/<name>/set-locally */
            case optionInfoSetLocally(String)
            /** option-info/<name>/default-value */
            case optionInfoDefaultValue(String)
            /** option-info/<name>/min */
            case optionInfoMin(String)
            /** option-info/<name>/max */
            case optionInfoMax(String)
            /** option-info/<name>/choices */
            case optionInfoChoices(String)
            /** string value */
            var rawValue: String {
                switch self {
                case let .optionInfoName(name): return "option-info/\(name)/name"
                case let .optionInfoType(name): return "option-info/\(name)/type"
                case let .optionInfoSetFromCommandline(name): return "option-info/\(name)/set-from-commandline"
                case let .optionInfoSetLocally(name): return "option-info/\(name)/set-locally"
                case let .optionInfoDefaultValue(name): return "option-info/\(name)/default-value"
                case let .optionInfoMin(name): return "option-info/\(name)/min"
                case let .optionInfoMax(name): return "option-info/\(name)/max"
                case let .optionInfoChoices(name): return "option-info/\(name)/choices"
                case .optionInfo: return "option-info/<name>"
                }
            }
        }
        /** property-list */
        case propertyList
        /** string value */
        var rawValue: String {
            switch self {
            case .audioSpeedCorrection: return "audio-speed-correction"
            case .videoSpeedCorrection: return "video-speed-correction"
            case .displaySyncActive: return "display-sync-active"
            case let .filename(value): return value.rawValue
            case .fileSize: return "file-size"
            case .estimatedFrameCount: return "estimated-frame-count"
            case .estimatedFrameNumber: return "estimated-frame-number"
            case .path: return "path"
            case .mediaTitle: return "media-title"
            case .fileFormat: return "file-format"
            case .currentDemuxer: return "current-demuxer"
            case .streamPath: return "stream-path"
            case .streamPos: return "stream-pos"
            case .streamEnd: return "stream-end"
            case .duration: return "duration"
            case .avsync: return "avsync"
            case .totalAvsyncChange: return "total-avsync-change"
            case .decoderFrameDropCount: return "decoder-frame-drop-count"
            case .frameDropCount: return "frame-drop-count"
            case .mistimedFrameCount: return "mistimed-frame-count"
            case .vsyncRatio: return "vsync-ratio"
            case .voDelayedFrameCount: return "vo-delayed-frame-count"
            case .percentPos: return "percent-pos"
            case .timePos: return "time-pos"
            case .timeStart: return "time-start"
            case .timeRemaining: return "time-remaining"
            case .audioPts: return "audio-pts"
            case .playtimeRemaining: return "playtime-remaining"
            case .playbackTime: return "playback-time"
            case .chapter: return "chapter"
            case .edition: return "edition"
            case let .discTitles(value): return value.rawValue
            case .discTitleList: return "disc-title-list"
            case .discTitle: return "disc-title"
            case .chapters: return "chapters"
            case .editions: return "editions"
            case let .editionList(value): return value.rawValue
            case .angle: return "angle"
            case let .metadata(value): return value.rawValue
            case .filteredMetadata: return "filtered-metadata"
            case .chapterMetadata: return "chapter-metadata"
            case .idleActive: return "idle-active"
            case .coreIdle: return "core-idle"
            case .cache: return "cache"
            case .demuxerCacheDuration: return "demuxer-cache-duration"
            case .demuxerCacheTime: return "demuxer-cache-time"
            case .demuxerCacheIdle: return "demuxer-cache-idle"
            case .demuxerViaNetwork: return "demuxer-via-network"
            case .demuxerStartTime: return "demuxer-start-time"
            case .pausedForCache: return "paused-for-cache"
            case .cacheBufferingState: return "cache-buffering-state"
            case .eofReached: return "eof-reached"
            case .seeking: return "seeking"
            case .mixerActive: return "mixer-active"
            case .aoVolume: return "ao-volume"
            case .aoMute: return "ao-mute"
            case .audioCodec: return "audio-codec"
            case let .audioParams(value): return value.rawValue
            case .audioOutParams: return "audio-out-params"
            case .colormatrix: return "colormatrix"
            case .hwdec: return "hwdec"
            case .videoFormat: return "video-format"
            case .videoCodec: return "video-codec"
            case .width: return "width"
            case .height: return "height"
            case let .videoParams(value): return value.rawValue
            case .dwidth: return "dwidth"
            case .dheight: return "dheight"
            case .videoDecParams: return "video-dec-params"
            case .videoOutParams: return "video-out-params"
            case .videoFrameInfo: return "video-frame-info"
            case .containerFps: return "container-fps"
            case .estimatedVfFps: return "estimated-vf-fps"
            case .windowScale: return "window-scale"
            case .windowMinimized: return "window-minimized"
            case .displayNames: return "display-names"
            case .displayFps: return "display-fps"
            case .estimatedDisplayFps: return "estimated-display-fps"
            case .vsyncJitter: return "vsync-jitter"
            case .videoAspect: return "video-aspect"
            case .osdWidth: return "osd-width"
            case .osdHeight: return "osd-height"
            case .osdPar: return "osd-par"
            case .program: return "program"
            case .dvbChannel: return "dvb-channel"
            case .subText: return "sub-text"
            case .tvBrightness: return "tv-brightness"
            case .tvContrast: return "tv-contrast"
            case .tvSaturation: return "tv-saturation"
            case .tvHue: return "tv-hue"
            case .playlistPos: return "playlist-pos"
            case .playlistCount: return "playlist-count"
            case let .playlist(value): return value.rawValue
            case let .trackList(value): return value.rawValue
            case let .chapterList(value): return value.rawValue
            case .af: return "af"
            case .vf: return "vf"
            case .seekable: return "seekable"
            case .partiallySeekable: return "partially-seekable"
            case .playbackAbort: return "playback-abort"
            case .cursorAutohide: return "cursor-autohide"
            case .osdSymCc: return "osd-sym-cc"
            case .osdAssCc: return "osd-ass-cc"
            case .voConfigured: return "vo-configured"
            case let .voPasses(value): return value.rawValue
            case .videoBitrate: return "video-bitrate"
            case .audioBitrate: return "audio-bitrate"
            case .subBitrate: return "sub-bitrate"
            case .packetVideoBitrate: return "packet-video-bitrate"
            case .packetAudioBitrate: return "packet-audio-bitrate"
            case .packetSubBitrate: return "packet-sub-bitrate"
            case .audioDeviceList: return "audio-device-list"
            case .audioDevice: return "audio-device"
            case .currentVo: return "current-vo"
            case .currentAo: return "current-ao"
            case .audioOutDetectedDevice: return "audio-out-detected-device"
            case .workingDirectory: return "working-directory"
            case .protocolList: return "protocol-list"
            case .decoderList: return "decoder-list"
            case .family: return "family"
            case .codec: return "codec"
            case .driver: return "driver"
            case .description: return "description"
            case .encoderList: return "encoder-list"
            case .mpvVersion: return "mpv-version"
            case .mpvConfiguration: return "mpv-configuration"
            case .ffmpegVersion: return "ffmpeg-version"
            case let .options(name): return "options/\(name)"
            case let .fileLocalOptions(name): return "file-local-options/\(name)"
            case let .optionInfo(value): return value.rawValue
            case .propertyList: return "property-list"
            }
        }
    }
}
