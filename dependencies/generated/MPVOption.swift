// This file is auto-generated by Scripts/parse_doc.rb, do not modify! 
// Generated at 16/11/2017 14:24

import Foundation
extension MPV {
    public enum Option {
        case trackSelection(TrackSelection)
        case playbackControl(PlaybackControl)
        case programBehavior(ProgramBehavior)
        case video(Video)
        case audio(Audio)
        case subtitles(Subtitles)
        case window(Window)
        case discDevices(DiscDevices)
        case equalizer(Equalizer)
        case demuxer(Demuxer)
        case input(Input)
        case oSD(OSD)
        case screenshot(Screenshot)
        case softwareScaler(SoftwareScaler)
        case terminal(Terminal)
        case cache(Cache)
        case network(Network)
        case dVB(DVB)
        case aLSAAudioOutputOptions(ALSAAudioOutputOptions)
        case openGLRendererOptions(OpenGLRendererOptions)
        case miscellaneous(Miscellaneous)

        public var rawValue: String {
            switch self {
            case let .trackSelection(item): return item.rawValue
            case let .playbackControl(item): return item.rawValue
            case let .programBehavior(item): return item.rawValue
            case let .video(item): return item.rawValue
            case let .audio(item): return item.rawValue
            case let .subtitles(item): return item.rawValue
            case let .window(item): return item.rawValue
            case let .discDevices(item): return item.rawValue
            case let .equalizer(item): return item.rawValue
            case let .demuxer(item): return item.rawValue
            case let .input(item): return item.rawValue
            case let .oSD(item): return item.rawValue
            case let .screenshot(item): return item.rawValue
            case let .softwareScaler(item): return item.rawValue
            case let .terminal(item): return item.rawValue
            case let .cache(item): return item.rawValue
            case let .network(item): return item.rawValue
            case let .dVB(item): return item.rawValue
            case let .aLSAAudioOutputOptions(item): return item.rawValue
            case let .openGLRendererOptions(item): return item.rawValue
            case let .miscellaneous(item): return item.rawValue
            }
        }
        public enum TrackSelection: String {
            /** --alang=<languagecode[ */
            case alang
            /** --slang=<languagecode[ */
            case slang
            /** --aid=<ID|auto|no> */
            case aid
            /** --sid=<ID|auto|no> */
            case sid
            /** --vid=<ID|auto|no> */
            case vid
            /** --ff-aid=<ID|auto|no> */
            case ffAid = "ff-aid"
            /** --ff-sid=<ID|auto|no> */
            case ffSid = "ff-sid"
            /** --ff-vid=<ID|auto|no> */
            case ffVid = "ff-vid"
            /** --edition=<ID|auto> */
            case edition
            /** --track-auto-selection=<yes|no> */
            case trackAutoSelection = "track-auto-selection"
        }

        public enum PlaybackControl: String {
            /** --start=<relative time> */
            case start
            /** --end=<time> */
            case end
            /** --length=<relative time> */
            case length
            /** --rebase-start-time=<yes|no> */
            case rebaseStartTime = "rebase-start-time"
            /** --speed=<0.01-100> */
            case speed
            /** --pause */
            case pause
            /** --shuffle */
            case shuffle
            /** --chapter=<start[-end]> */
            case chapter
            /** --playlist-start=<auto|index> */
            case playlistStart = "playlist-start"
            /** --playlist=<filename> */
            case playlist
            /** --chapter-merge-threshold=<number> */
            case chapterMergeThreshold = "chapter-merge-threshold"
            /** --chapter-seek-threshold=<seconds> */
            case chapterSeekThreshold = "chapter-seek-threshold"
            /** --hr-seek=<no|absolute|yes> */
            case hrSeek = "hr-seek"
            /** --hr-seek-demuxer-offset=<seconds> */
            case hrSeekDemuxerOffset = "hr-seek-demuxer-offset"
            /** --hr-seek-framedrop=<yes|no> */
            case hrSeekFramedrop = "hr-seek-framedrop"
            /** --index=<mode> */
            case index
            /** --load-unsafe-playlists */
            case loadUnsafePlaylists = "load-unsafe-playlists"
            /** --access-references=<yes|no> */
            case accessReferences = "access-references"
            /** --loop-playlist=<N|inf|force|no> */
            case loopPlaylist = "loop-playlist"
            /** --loop-file=<N|inf|no> */
            case loopFile = "loop-file"
            /** --loop=<N|inf|no> */
            case loop
            /** --ab-loop-a=<time> */
            case abLoopA = "ab-loop-a"
            /** --ab-loop-b=<time> */
            case abLoopB = "ab-loop-b"
            /** --ordered-chapters */
            case orderedChapters = "ordered-chapters"
            /** --no-ordered-chapters */
            case noOrderedChapters = "no-ordered-chapters"
            /** --ordered-chapters-files=<playlist-file> */
            case orderedChaptersFiles = "ordered-chapters-files"
            /** --chapters-file=<filename> */
            case chaptersFile = "chapters-file"
            /** --sstep=<sec> */
            case sstep
            /** --stop-playback-on-init-failure=<yes|no> */
            case stopPlaybackOnInitFailure = "stop-playback-on-init-failure"
        }

        public enum ProgramBehavior: String {
            /** --help */
            case help
            /** --h */
            case h
            /** --version */
            case version
            /** --no-config */
            case noConfig = "no-config"
            /** --list-options */
            case listOptions = "list-options"
            /** --list-properties */
            case listProperties = "list-properties"
            /** --list-protocols */
            case listProtocols = "list-protocols"
            /** --log-file=<path> */
            case logFile = "log-file"
            /** --config-dir=<path> */
            case configDir = "config-dir"
            /** --save-position-on-quit */
            case savePositionOnQuit = "save-position-on-quit"
            /** --dump-stats=<filename> */
            case dumpStats = "dump-stats"
            /** --idle=<no|yes|once> */
            case idle
            /** --include=<configuration-file> */
            case include
            /** --load-scripts=<yes|no> */
            case loadScripts = "load-scripts"
            /** --script=<filename> */
            case script
            /** --script-opts=key1=value1 */
            case scriptOpts = "script-opts"
            /** --merge-files */
            case mergeFiles = "merge-files"
            /** --no-resume-playback */
            case noResumePlayback = "no-resume-playback"
            /** --profile=<profile1 */
            case profile
            /** --reset-on-next-file=<all|option1 */
            case resetOnNextFile = "reset-on-next-file"
            /** --write-filename-in-watch-later-config */
            case writeFilenameInWatchLaterConfig = "write-filename-in-watch-later-config"
            /** --ignore-path-in-watch-later-config */
            case ignorePathInWatchLaterConfig = "ignore-path-in-watch-later-config"
            /** --show-profile=<profile> */
            case showProfile = "show-profile"
            /** --use-filedir-conf */
            case useFiledirConf = "use-filedir-conf"
            /** --ytdl */
            case ytdl
            /** --no-ytdl */
            case noYtdl = "no-ytdl"
            /** --ytdl-format=<best|worst|mp4|webm|...> */
            case ytdlFormat = "ytdl-format"
            /** --ytdl-raw-options=<key>=<value>[ */
            case ytdlRawOptions = "ytdl-raw-options"
            /** --player-operation-mode=<cplayer|pseudo-gui> */
            case playerOperationMode = "player-operation-mode"
        }

        public enum Video: String {
            /** --vo=<driver> */
            case vo
            /** --vd=<...> */
            case vd
            /** --vf=<filter1[=parameter1:parameter2:...] */
            case vf
            /** --untimed */
            case untimed
            /** --framedrop=<mode> */
            case framedrop
            /** --display-fps=<fps> */
            case displayFps = "display-fps"
            /** --hwdec=<api> */
            case hwdec
            /** --opengl-hwdec-interop=<name> */
            case openglHwdecInterop = "opengl-hwdec-interop"
            /** --videotoolbox-format=<name> */
            case videotoolboxFormat = "videotoolbox-format"
            /** --panscan=<0.0-1.0> */
            case panscan
            /** --video-aspect=<ratio|no> */
            case videoAspect = "video-aspect"
            /** --video-aspect-method=<bitstream|container> */
            case videoAspectMethod = "video-aspect-method"
            /** --video-unscaled=<no|yes|downscale-big> */
            case videoUnscaled = "video-unscaled"
            /** --video-pan-x=<value> */
            case videoPanX = "video-pan-x"
            /** --video-pan-y=<value> */
            case videoPanY = "video-pan-y"
            /** --video-rotate=<0-359|no> */
            case videoRotate = "video-rotate"
            /** --video-stereo-mode=<no|mode> */
            case videoStereoMode = "video-stereo-mode"
            /** --video-zoom=<value> */
            case videoZoom = "video-zoom"
            /** --video-align-x=<-1-1> */
            case videoAlignX = "video-align-x"
            /** --video-align-y=<-1-1> */
            case videoAlignY = "video-align-y"
            /** --correct-pts */
            case correctPts = "correct-pts"
            /** --no-correct-pts */
            case noCorrectPts = "no-correct-pts"
            /** --fps=<float> */
            case fps
            /** --deinterlace=<yes|no> */
            case deinterlace
            /** --frames=<number> */
            case frames
            /** --video-output-levels=<outputlevels> */
            case videoOutputLevels = "video-output-levels"
            /** --hwdec-codecs=<codec1 */
            case hwdecCodecs = "hwdec-codecs"
            /** --vd-lavc-check-hw-profile=<yes|no> */
            case vdLavcCheckHwProfile = "vd-lavc-check-hw-profile"
            /** --vd-lavc-software-fallback=<yes|no|N> */
            case vdLavcSoftwareFallback = "vd-lavc-software-fallback"
            /** --vd-lavc-dr=<yes|no> */
            case vdLavcDr = "vd-lavc-dr"
            /** --vd-lavc-bitexact */
            case vdLavcBitexact = "vd-lavc-bitexact"
            /** --vd-lavc-fast */
            case vdLavcFast = "vd-lavc-fast"
            /** --vd-lavc-o=<key>=<value>[ */
            case vdLavcO = "vd-lavc-o"
            /** --vd-lavc-show-all=<yes|no> */
            case vdLavcShowAll = "vd-lavc-show-all"
            /** --vd-lavc-skiploopfilter=<skipvalue> (H.264 only) */
            case vdLavcSkiploopfilter = "vd-lavc-skiploopfilter"
            /** --vd-lavc-skipidct=<skipvalue> (MPEG-1/2 only) */
            case vdLavcSkipidct = "vd-lavc-skipidct"
            /** --vd-lavc-skipframe=<skipvalue> */
            case vdLavcSkipframe = "vd-lavc-skipframe"
            /** --vd-lavc-framedrop=<skipvalue> */
            case vdLavcFramedrop = "vd-lavc-framedrop"
            /** --vd-lavc-threads=<N> */
            case vdLavcThreads = "vd-lavc-threads"
        }

        public enum Audio: String {
            /** --audio-pitch-correction=<yes|no> */
            case audioPitchCorrection = "audio-pitch-correction"
            /** --audio-device=<name> */
            case audioDevice = "audio-device"
            /** --audio-exclusive=<yes|no> */
            case audioExclusive = "audio-exclusive"
            /** --audio-fallback-to-null=<yes|no> */
            case audioFallbackToNull = "audio-fallback-to-null"
            /** --ao=<driver> */
            case ao
            /** --af=<filter1[=parameter1:parameter2:...] */
            case af
            /** --audio-spdif=<codecs> */
            case audioSpdif = "audio-spdif"
            /** --ad=<decoder1 */
            case ad
            /** --volume=<value> */
            case volume
            /** --replaygain=<no|track|album> */
            case replaygain
            /** --replaygain-preamp=<db> */
            case replaygainPreamp = "replaygain-preamp"
            /** --replaygain-clip=<yes|no> */
            case replaygainClip = "replaygain-clip"
            /** --replaygain-fallback=<db> */
            case replaygainFallback = "replaygain-fallback"
            /** --balance=<value> */
            case balance
            /** --audio-delay=<sec> */
            case audioDelay = "audio-delay"
            /** --mute=<yes|no|auto> */
            case mute
            /** --softvol=<no|yes|auto> */
            case softvol
            /** --audio-demuxer=<[+]name> */
            case audioDemuxer = "audio-demuxer"
            /** --ad-lavc-ac3drc=<level> */
            case adLavcAc3drc = "ad-lavc-ac3drc"
            /** --ad-lavc-downmix=<yes|no> */
            case adLavcDownmix = "ad-lavc-downmix"
            /** --ad-lavc-threads=<0-16> */
            case adLavcThreads = "ad-lavc-threads"
            /** --ad-lavc-o=<key>=<value>[ */
            case adLavcO = "ad-lavc-o"
            /** --ad-spdif-dtshd=<yes|no> */
            case adSpdifDtshd = "ad-spdif-dtshd"
            /** --dtshd */
            case dtshd
            /** --no-dtshd */
            case noDtshd = "no-dtshd"
            /** --audio-channels=<auto-safe|auto|layouts> */
            case audioChannels = "audio-channels"
            /** --audio-normalize-downmix=<yes|no> */
            case audioNormalizeDownmix = "audio-normalize-downmix"
            /** --audio-display=<no|attachment> */
            case audioDisplay = "audio-display"
            /** --audio-files=<files> */
            case audioFiles = "audio-files"
            /** --audio-file=<file> */
            case audioFile = "audio-file"
            /** --audio-format=<format> */
            case audioFormat = "audio-format"
            /** --audio-samplerate=<Hz> */
            case audioSamplerate = "audio-samplerate"
            /** --gapless-audio=<no|yes|weak> */
            case gaplessAudio = "gapless-audio"
            /** --initial-audio-sync */
            case initialAudioSync = "initial-audio-sync"
            /** --no-initial-audio-sync */
            case noInitialAudioSync = "no-initial-audio-sync"
            /** --volume-max=<100.0-1000.0> */
            case volumeMax = "volume-max"
            /** --softvol-max=<...> */
            case softvolMax = "softvol-max"
            /** --audio-file-auto=<no|exact|fuzzy|all> */
            case audioFileAuto = "audio-file-auto"
            /** --no-audio-file-auto */
            case noAudioFileAuto = "no-audio-file-auto"
            /** --audio-file-paths=<path1:path2:...> */
            case audioFilePaths = "audio-file-paths"
            /** --audio-client-name=<name> */
            case audioClientName = "audio-client-name"
            /** --audio-buffer=<seconds> */
            case audioBuffer = "audio-buffer"
            /** --audio-stream-silence=<yes|no> */
            case audioStreamSilence = "audio-stream-silence"
            /** --audio-wait-open=<secs> */
            case audioWaitOpen = "audio-wait-open"
        }

        public enum Subtitles: String {
            /** --sub-demuxer=<[+]name> */
            case subDemuxer = "sub-demuxer"
            /** --sub-delay=<sec> */
            case subDelay = "sub-delay"
            /** --sub-files=<file-list> */
            case subFiles = "sub-files"
            /** --secondary-sid=<ID|auto|no> */
            case secondarySid = "secondary-sid"
            /** --sub-scale=<0-100> */
            case subScale = "sub-scale"
            /** --sub-scale-by-window=<yes|no> */
            case subScaleByWindow = "sub-scale-by-window"
            /** --sub-scale-with-window=<yes|no> */
            case subScaleWithWindow = "sub-scale-with-window"
            /** --sub-ass-scale-with-window=<yes|no> */
            case subAssScaleWithWindow = "sub-ass-scale-with-window"
            /** --embeddedfonts */
            case embeddedfonts
            /** --no-embeddedfonts */
            case noEmbeddedfonts = "no-embeddedfonts"
            /** --sub-pos=<0-100> */
            case subPos = "sub-pos"
            /** --sub-speed=<0.1-10.0> */
            case subSpeed = "sub-speed"
            /** --sub-ass-force-style=<[Style.]Param=Value[ */
            case subAssForceStyle = "sub-ass-force-style"
            /** --sub-ass-hinting=<none|light|normal|native> */
            case subAssHinting = "sub-ass-hinting"
            /** --sub-ass-line-spacing=<value> */
            case subAssLineSpacing = "sub-ass-line-spacing"
            /** --sub-ass-shaper=<simple|complex> */
            case subAssShaper = "sub-ass-shaper"
            /** --sub-ass-styles=<filename> */
            case subAssStyles = "sub-ass-styles"
            /** --sub-ass-override=<yes|no|force|scale|strip> */
            case subAssOverride = "sub-ass-override"
            /** --sub-ass-force-margins */
            case subAssForceMargins = "sub-ass-force-margins"
            /** --sub-use-margins */
            case subUseMargins = "sub-use-margins"
            /** --sub-ass-vsfilter-aspect-compat=<yes|no> */
            case subAssVsfilterAspectCompat = "sub-ass-vsfilter-aspect-compat"
            /** --sub-ass-vsfilter-blur-compat=<yes|no> */
            case subAssVsfilterBlurCompat = "sub-ass-vsfilter-blur-compat"
            /** --sub-ass-vsfilter-color-compat=<basic|full|force-601|no> */
            case subAssVsfilterColorCompat = "sub-ass-vsfilter-color-compat"
            /** --stretch-dvd-subs=<yes|no> */
            case stretchDvdSubs = "stretch-dvd-subs"
            /** --stretch-image-subs-to-screen=<yes|no> */
            case stretchImageSubsToScreen = "stretch-image-subs-to-screen"
            /** --image-subs-video-resolution=<yes|no> */
            case imageSubsVideoResolution = "image-subs-video-resolution"
            /** --sub-ass */
            case subAss = "sub-ass"
            /** --no-sub-ass */
            case noSubAss = "no-sub-ass"
            /** --sub-auto=<no|exact|fuzzy|all> */
            case subAuto = "sub-auto"
            /** --no-sub-auto */
            case noSubAuto = "no-sub-auto"
            /** --sub-codepage=<codepage> */
            case subCodepage = "sub-codepage"
            /** --sub-fix-timing=<yes|no> */
            case subFixTiming = "sub-fix-timing"
            /** --sub-forced-only */
            case subForcedOnly = "sub-forced-only"
            /** --sub-fps=<rate> */
            case subFps = "sub-fps"
            /** --sub-gauss=<0.0-3.0> */
            case subGauss = "sub-gauss"
            /** --sub-gray */
            case subGray = "sub-gray"
            /** --sub-paths=<path1:path2:...> */
            case subPaths = "sub-paths"
            /** --sub-file-paths=<path-list> */
            case subFilePaths = "sub-file-paths"
            /** --sub-visibility */
            case subVisibility = "sub-visibility"
            /** --no-sub-visibility */
            case noSubVisibility = "no-sub-visibility"
            /** --sub-clear-on-seek */
            case subClearOnSeek = "sub-clear-on-seek"
            /** --teletext-page=<1-999> */
            case teletextPage = "teletext-page"
            /** --sub-font=<name> */
            case subFont = "sub-font"
            /** --sub-font-size=<size> */
            case subFontSize = "sub-font-size"
            /** --sub-back-color=<color> */
            case subBackColor = "sub-back-color"
            /** --sub-blur=<0..20.0> */
            case subBlur = "sub-blur"
            /** --sub-bold=<yes|no> */
            case subBold = "sub-bold"
            /** --sub-italic=<yes|no> */
            case subItalic = "sub-italic"
            /** --sub-border-color=<color> */
            case subBorderColor = "sub-border-color"
            /** --sub-border-size=<size> */
            case subBorderSize = "sub-border-size"
            /** --sub-color=<color> */
            case subColor = "sub-color"
            /** --sub-margin-x=<size> */
            case subMarginX = "sub-margin-x"
            /** --sub-margin-y=<size> */
            case subMarginY = "sub-margin-y"
            /** --sub-align-x=<left|center|right> */
            case subAlignX = "sub-align-x"
            /** --sub-align-y=<top|center|bottom> */
            case subAlignY = "sub-align-y"
            /** --sub-justify=<auto|left|center|right> */
            case subJustify = "sub-justify"
            /** --sub-ass-justify=<yes|no> */
            case subAssJustify = "sub-ass-justify"
            /** --sub-shadow-color=<color> */
            case subShadowColor = "sub-shadow-color"
            /** --sub-shadow-offset=<size> */
            case subShadowOffset = "sub-shadow-offset"
            /** --sub-spacing=<size> */
            case subSpacing = "sub-spacing"
            /** --sub-filter-sdh=<yes|no> */
            case subFilterSdh = "sub-filter-sdh"
            /** --sub-filter-sdh-harder=<yes|no> */
            case subFilterSdhHarder = "sub-filter-sdh-harder"
        }

        public enum Window: String {
            /** --title=<string> */
            case title
            /** --screen=<default|0-32> */
            case screen
            /** --fullscreen */
            case fullscreen
            /** --fs */
            case fs
            /** --fs-screen=<all|current|0-32> */
            case fsScreen = "fs-screen"
            /** --keep-open=<yes|no|always> */
            case keepOpen = "keep-open"
            /** --keep-open-pause=<yes|no> */
            case keepOpenPause = "keep-open-pause"
            /** --image-display-duration=<seconds|inf> */
            case imageDisplayDuration = "image-display-duration"
            /** --force-window=<yes|no|immediate> */
            case forceWindow = "force-window"
            /** --taskbar-progress */
            case taskbarProgress = "taskbar-progress"
            /** --no-taskbar-progress */
            case noTaskbarProgress = "no-taskbar-progress"
            /** --snap-window */
            case snapWindow = "snap-window"
            /** --ontop */
            case ontop
            /** --ontop-level=<window|system|level> */
            case ontopLevel = "ontop-level"
            /** --border */
            case border
            /** --no-border */
            case noBorder = "no-border"
            /** --fit-border */
            case fitBorder = "fit-border"
            /** --no-fit-border */
            case noFitBorder = "no-fit-border"
            /** --on-all-workspaces */
            case onAllWorkspaces = "on-all-workspaces"
            /** --geometry=<[W[xH]][+-x+-y]> */
            case geometry
            /** --autofit=<[W[xH]]> */
            case autofit
            /** --autofit-larger=<[W[xH]]> */
            case autofitLarger = "autofit-larger"
            /** --autofit-smaller=<[W[xH]]> */
            case autofitSmaller = "autofit-smaller"
            /** --window-scale=<factor> */
            case windowScale = "window-scale"
            /** --cursor-autohide=<number|no|always> */
            case cursorAutohide = "cursor-autohide"
            /** --cursor-autohide-fs-only */
            case cursorAutohideFsOnly = "cursor-autohide-fs-only"
            /** --no-fixed-vo */
            case noFixedVo = "no-fixed-vo"
            /** --fixed-vo */
            case fixedVo = "fixed-vo"
            /** --force-rgba-osd-rendering */
            case forceRgbaOsdRendering = "force-rgba-osd-rendering"
            /** --force-window-position */
            case forceWindowPosition = "force-window-position"
            /** --heartbeat-interval=<sec> */
            case heartbeatInterval = "heartbeat-interval"
            /** --no-keepaspect */
            case noKeepaspect = "no-keepaspect"
            /** --keepaspect */
            case keepaspect
            /** --no-keepaspect-window */
            case noKeepaspectWindow = "no-keepaspect-window"
            /** --keepaspect-window */
            case keepaspectWindow = "keepaspect-window"
            /** --monitoraspect=<ratio> */
            case monitoraspect
            /** --hidpi-window-scale */
            case hidpiWindowScale = "hidpi-window-scale"
            /** --no-hidpi-window-scale */
            case noHidpiWindowScale = "no-hidpi-window-scale"
            /** --native-fs */
            case nativeFs = "native-fs"
            /** --no-native-fs */
            case noNativeFs = "no-native-fs"
            /** --monitorpixelaspect=<ratio> */
            case monitorpixelaspect
            /** --stop-screensaver */
            case stopScreensaver = "stop-screensaver"
            /** --no-stop-screensaver */
            case noStopScreensaver = "no-stop-screensaver"
            /** --wid=<ID> */
            case wid
            /** --no-window-dragging */
            case noWindowDragging = "no-window-dragging"
            /** --x11-name */
            case x11Name = "x11-name"
            /** --x11-netwm=<yes|no|auto> */
            case x11Netwm = "x11-netwm"
            /** --x11-bypass-compositor=<yes|no|fs-only|never> */
            case x11BypassCompositor = "x11-bypass-compositor"
        }

        public enum DiscDevices: String {
            /** --cdrom-device=<path> */
            case cdromDevice = "cdrom-device"
            /** --dvd-device=<path> */
            case dvdDevice = "dvd-device"
            /** --bluray-device=<path> */
            case blurayDevice = "bluray-device"
            /** --cdda-speed=<value> */
            case cddaSpeed = "cdda-speed"
            /** --cdda-paranoia=<0-2> */
            case cddaParanoia = "cdda-paranoia"
            /** --cdda-sector-size=<value> */
            case cddaSectorSize = "cdda-sector-size"
            /** --cdda-overlap=<value> */
            case cddaOverlap = "cdda-overlap"
            /** --cdda-toc-bias */
            case cddaTocBias = "cdda-toc-bias"
            /** --cdda-toc-offset=<value> */
            case cddaTocOffset = "cdda-toc-offset"
            /** --cdda-skip=<yes|no> */
            case cddaSkip = "cdda-skip"
            /** --cdda-cdtext=<yes|no> */
            case cddaCdtext = "cdda-cdtext"
            /** --dvd-speed=<speed> */
            case dvdSpeed = "dvd-speed"
            /** --dvd-angle=<ID> */
            case dvdAngle = "dvd-angle"
        }

        public enum Equalizer: String {
            /** --brightness=<-100-100> */
            case brightness
            /** --contrast=<-100-100> */
            case contrast
            /** --saturation=<-100-100> */
            case saturation
            /** --gamma=<-100-100> */
            case gamma
            /** --hue=<-100-100> */
            case hue
        }

        public enum Demuxer: String {
            /** --demuxer=<[+]name> */
            case demuxer
            /** --demuxer-lavf-analyzeduration=<value> */
            case demuxerLavfAnalyzeduration = "demuxer-lavf-analyzeduration"
            /** --demuxer-lavf-probe-info=<yes|no|auto> */
            case demuxerLavfProbeInfo = "demuxer-lavf-probe-info"
            /** --demuxer-lavf-probescore=<1-100> */
            case demuxerLavfProbescore = "demuxer-lavf-probescore"
            /** --demuxer-lavf-allow-mimetype=<yes|no> */
            case demuxerLavfAllowMimetype = "demuxer-lavf-allow-mimetype"
            /** --demuxer-lavf-format=<name> */
            case demuxerLavfFormat = "demuxer-lavf-format"
            /** --demuxer-lavf-hacks=<yes|no> */
            case demuxerLavfHacks = "demuxer-lavf-hacks"
            /** --demuxer-lavf-genpts-mode=<no|lavf> */
            case demuxerLavfGenptsMode = "demuxer-lavf-genpts-mode"
            /** --demuxer-lavf-o=<key>=<value>[ */
            case demuxerLavfO = "demuxer-lavf-o"
            /** --demuxer-lavf-probesize=<value> */
            case demuxerLavfProbesize = "demuxer-lavf-probesize"
            /** --demuxer-lavf-buffersize=<value> */
            case demuxerLavfBuffersize = "demuxer-lavf-buffersize"
            /** --demuxer-mkv-subtitle-preroll=<yes|index|no> */
            case demuxerMkvSubtitlePreroll = "demuxer-mkv-subtitle-preroll"
            /** --mkv-subtitle-preroll */
            case mkvSubtitlePreroll = "mkv-subtitle-preroll"
            /** --demuxer-mkv-subtitle-preroll-secs=<value> */
            case demuxerMkvSubtitlePrerollSecs = "demuxer-mkv-subtitle-preroll-secs"
            /** --demuxer-mkv-subtitle-preroll-secs-index=<value> */
            case demuxerMkvSubtitlePrerollSecsIndex = "demuxer-mkv-subtitle-preroll-secs-index"
            /** --demuxer-mkv-probe-video-duration=<yes|no|full> */
            case demuxerMkvProbeVideoDuration = "demuxer-mkv-probe-video-duration"
            /** --demuxer-rawaudio-channels=<value> */
            case demuxerRawaudioChannels = "demuxer-rawaudio-channels"
            /** --demuxer-rawaudio-format=<value> */
            case demuxerRawaudioFormat = "demuxer-rawaudio-format"
            /** --demuxer-rawaudio-rate=<value> */
            case demuxerRawaudioRate = "demuxer-rawaudio-rate"
            /** --demuxer-rawvideo-fps=<value> */
            case demuxerRawvideoFps = "demuxer-rawvideo-fps"
            /** --demuxer-rawvideo-w=<value> */
            case demuxerRawvideoW = "demuxer-rawvideo-w"
            /** --demuxer-rawvideo-h=<value> */
            case demuxerRawvideoH = "demuxer-rawvideo-h"
            /** --demuxer-rawvideo-format=<value> */
            case demuxerRawvideoFormat = "demuxer-rawvideo-format"
            /** --demuxer-rawvideo-mp-format=<value> */
            case demuxerRawvideoMpFormat = "demuxer-rawvideo-mp-format"
            /** --demuxer-rawvideo-codec=<value> */
            case demuxerRawvideoCodec = "demuxer-rawvideo-codec"
            /** --demuxer-rawvideo-size=<value> */
            case demuxerRawvideoSize = "demuxer-rawvideo-size"
            /** --demuxer-max-bytes=<bytes> */
            case demuxerMaxBytes = "demuxer-max-bytes"
            /** --demuxer-max-packets=<packets> */
            case demuxerMaxPackets = "demuxer-max-packets"
            /** --demuxer-thread=<yes|no> */
            case demuxerThread = "demuxer-thread"
            /** --demuxer-readahead-secs=<seconds> */
            case demuxerReadaheadSecs = "demuxer-readahead-secs"
            /** --prefetch-playlist=<yes|no> */
            case prefetchPlaylist = "prefetch-playlist"
            /** --force-seekable=<yes|no> */
            case forceSeekable = "force-seekable"
        }

        public enum Input: String {
            /** --native-keyrepeat */
            case nativeKeyrepeat = "native-keyrepeat"
            /** --input-ar-delay */
            case inputArDelay = "input-ar-delay"
            /** --input-ar-rate */
            case inputArRate = "input-ar-rate"
            /** --input-conf=<filename> */
            case inputConf = "input-conf"
            /** --no-input-default-bindings */
            case noInputDefaultBindings = "no-input-default-bindings"
            /** --input-cmdlist */
            case inputCmdlist = "input-cmdlist"
            /** --input-doubleclick-time=<milliseconds> */
            case inputDoubleclickTime = "input-doubleclick-time"
            /** --input-keylist */
            case inputKeylist = "input-keylist"
            /** --input-key-fifo-size=<2-65000> */
            case inputKeyFifoSize = "input-key-fifo-size"
            /** --input-test */
            case inputTest = "input-test"
            /** --input-file=<filename> */
            case inputFile = "input-file"
            /** --input-terminal */
            case inputTerminal = "input-terminal"
            /** --no-input-terminal */
            case noInputTerminal = "no-input-terminal"
            /** --input-ipc-server=<filename> */
            case inputIpcServer = "input-ipc-server"
            /** --input-appleremote=<yes|no> */
            case inputAppleremote = "input-appleremote"
            /** --input-cursor */
            case inputCursor = "input-cursor"
            /** --no-input-cursor */
            case noInputCursor = "no-input-cursor"
            /** --input-media-keys=<yes|no> */
            case inputMediaKeys = "input-media-keys"
            /** --input-right-alt-gr */
            case inputRightAltGr = "input-right-alt-gr"
            /** --no-input-right-alt-gr */
            case noInputRightAltGr = "no-input-right-alt-gr"
            /** --input-vo-keyboard=<yes|no> */
            case inputVoKeyboard = "input-vo-keyboard"
        }

        public enum OSD: String {
            /** --osc */
            case osc
            /** --no-osc */
            case noOsc = "no-osc"
            /** --no-osd-bar */
            case noOsdBar = "no-osd-bar"
            /** --osd-bar */
            case osdBar = "osd-bar"
            /** --osd-duration=<time> */
            case osdDuration = "osd-duration"
            /** --osd-font=<name> */
            case osdFont = "osd-font"
            /** --osd-font-size=<size> */
            case osdFontSize = "osd-font-size"
            /** --osd-msg1=<string> */
            case osdMsg1 = "osd-msg1"
            /** --osd-msg2=<string> */
            case osdMsg2 = "osd-msg2"
            /** --osd-msg3=<string> */
            case osdMsg3 = "osd-msg3"
            /** --osd-status-msg=<string> */
            case osdStatusMsg = "osd-status-msg"
            /** --osd-playing-msg=<string> */
            case osdPlayingMsg = "osd-playing-msg"
            /** --osd-bar-align-x=<-1-1> */
            case osdBarAlignX = "osd-bar-align-x"
            /** --osd-bar-align-y=<-1-1> */
            case osdBarAlignY = "osd-bar-align-y"
            /** --osd-bar-w=<1-100> */
            case osdBarW = "osd-bar-w"
            /** --osd-bar-h=<0.1-50> */
            case osdBarH = "osd-bar-h"
            /** --osd-back-color=<color> */
            case osdBackColor = "osd-back-color"
            /** --osd-blur=<0..20.0> */
            case osdBlur = "osd-blur"
            /** --osd-bold=<yes|no> */
            case osdBold = "osd-bold"
            /** --osd-italic=<yes|no> */
            case osdItalic = "osd-italic"
            /** --osd-border-color=<color> */
            case osdBorderColor = "osd-border-color"
            /** --osd-border-size=<size> */
            case osdBorderSize = "osd-border-size"
            /** --osd-color=<color> */
            case osdColor = "osd-color"
            /** --osd-fractions */
            case osdFractions = "osd-fractions"
            /** --osd-level=<0-3> */
            case osdLevel = "osd-level"
            /** --osd-margin-x=<size> */
            case osdMarginX = "osd-margin-x"
            /** --osd-margin-y=<size> */
            case osdMarginY = "osd-margin-y"
            /** --osd-align-x=<left|center|right> */
            case osdAlignX = "osd-align-x"
            /** --osd-align-y=<top|center|bottom> */
            case osdAlignY = "osd-align-y"
            /** --osd-scale=<factor> */
            case osdScale = "osd-scale"
            /** --osd-scale-by-window=<yes|no> */
            case osdScaleByWindow = "osd-scale-by-window"
            /** --osd-shadow-color=<color> */
            case osdShadowColor = "osd-shadow-color"
            /** --osd-shadow-offset=<size> */
            case osdShadowOffset = "osd-shadow-offset"
            /** --osd-spacing=<size> */
            case osdSpacing = "osd-spacing"
            /** --video-osd=<yes|no> */
            case videoOsd = "video-osd"
        }

        public enum Screenshot: String {
            /** --screenshot-format=<type> */
            case screenshotFormat = "screenshot-format"
            /** --screenshot-tag-colorspace=<yes|no> */
            case screenshotTagColorspace = "screenshot-tag-colorspace"
            /** --screenshot-high-bit-depth=<yes|no> */
            case screenshotHighBitDepth = "screenshot-high-bit-depth"
            /** --screenshot-template=<template> */
            case screenshotTemplate = "screenshot-template"
            /** --screenshot-directory=<path> */
            case screenshotDirectory = "screenshot-directory"
            /** --screenshot-jpeg-quality=<0-100> */
            case screenshotJpegQuality = "screenshot-jpeg-quality"
            /** --screenshot-jpeg-source-chroma=<yes|no> */
            case screenshotJpegSourceChroma = "screenshot-jpeg-source-chroma"
            /** --screenshot-png-compression=<0-9> */
            case screenshotPngCompression = "screenshot-png-compression"
            /** --screenshot-png-filter=<0-5> */
            case screenshotPngFilter = "screenshot-png-filter"
        }

        public enum SoftwareScaler: String {
            /** --sws-scaler=<name> */
            case swsScaler = "sws-scaler"
            /** --sws-lgb=<0-100> */
            case swsLgb = "sws-lgb"
            /** --sws-cgb=<0-100> */
            case swsCgb = "sws-cgb"
            /** --sws-ls=<-100-100> */
            case swsLs = "sws-ls"
            /** --sws-cs=<-100-100> */
            case swsCs = "sws-cs"
            /** --sws-chs=<h> */
            case swsChs = "sws-chs"
            /** --sws-cvs=<v> */
            case swsCvs = "sws-cvs"
        }

        public enum Terminal: String {
            /** --quiet */
            case quiet
            /** --really-quiet */
            case reallyQuiet = "really-quiet"
            /** --no-terminal */
            case noTerminal = "no-terminal"
            /** --terminal */
            case terminal
            /** --no-msg-color */
            case noMsgColor = "no-msg-color"
            /** --msg-level=<module1=level1 */
            case msgLevel = "msg-level"
            /** --term-osd=<auto|no|force> */
            case termOsd = "term-osd"
            /** --term-osd-bar */
            case termOsdBar = "term-osd-bar"
            /** --no-term-osd-bar */
            case noTermOsdBar = "no-term-osd-bar"
            /** --term-osd-bar-chars=<string> */
            case termOsdBarChars = "term-osd-bar-chars"
            /** --term-playing-msg=<string> */
            case termPlayingMsg = "term-playing-msg"
            /** --term-status-msg=<string> */
            case termStatusMsg = "term-status-msg"
            /** --msg-module */
            case msgModule = "msg-module"
            /** --msg-time */
            case msgTime = "msg-time"
        }

        public enum Cache: String {
            /** --cache=<kBytes|yes|no|auto> */
            case cache
            /** --cache-default=<kBytes|no> */
            case cacheDefault = "cache-default"
            /** --cache-initial=<kBytes> */
            case cacheInitial = "cache-initial"
            /** --cache-seek-min=<kBytes> */
            case cacheSeekMin = "cache-seek-min"
            /** --cache-backbuffer=<kBytes> */
            case cacheBackbuffer = "cache-backbuffer"
            /** --cache-file=<TMP|path> */
            case cacheFile = "cache-file"
            /** --cache-file-size=<kBytes> */
            case cacheFileSize = "cache-file-size"
            /** --no-cache */
            case noCache = "no-cache"
            /** --cache-secs=<seconds> */
            case cacheSecs = "cache-secs"
            /** --cache-pause */
            case cachePause = "cache-pause"
            /** --no-cache-pause */
            case noCachePause = "no-cache-pause"
        }

        public enum Network: String {
            /** --user-agent=<string> */
            case userAgent = "user-agent"
            /** --cookies */
            case cookies
            /** --no-cookies */
            case noCookies = "no-cookies"
            /** --cookies-file=<filename> */
            case cookiesFile = "cookies-file"
            /** --http-header-fields=<field1 */
            case httpHeaderFields = "http-header-fields"
            /** --tls-ca-file=<filename> */
            case tlsCaFile = "tls-ca-file"
            /** --tls-verify */
            case tlsVerify = "tls-verify"
            /** --tls-cert-file */
            case tlsCertFile = "tls-cert-file"
            /** --tls-key-file */
            case tlsKeyFile = "tls-key-file"
            /** --referrer=<string> */
            case referrer
            /** --network-timeout=<seconds> */
            case networkTimeout = "network-timeout"
            /** --rtsp-transport=<lavf|udp|tcp|http> */
            case rtspTransport = "rtsp-transport"
            /** --hls-bitrate=<no|min|max|<rate>> */
            case hlsBitrate = "hls-bitrate"
        }

        public enum DVB: String {
            /** --dvbin-card=<1-4> */
            case dvbinCard = "dvbin-card"
            /** --dvbin-file=<filename> */
            case dvbinFile = "dvbin-file"
            /** --dvbin-timeout=<1-30> */
            case dvbinTimeout = "dvbin-timeout"
            /** --dvbin-full-transponder=<yes|no> */
            case dvbinFullTransponder = "dvbin-full-transponder"
        }

        public enum ALSAAudioOutputOptions: String {
            /** --alsa-device=<device> */
            case alsaDevice = "alsa-device"
            /** --alsa-resample=yes */
            case alsaResample = "alsa-resample"
            /** --alsa-mixer-device=<device> */
            case alsaMixerDevice = "alsa-mixer-device"
            /** --alsa-mixer-name=<name> */
            case alsaMixerName = "alsa-mixer-name"
            /** --alsa-mixer-index=<number> */
            case alsaMixerIndex = "alsa-mixer-index"
            /** --alsa-non-interleaved */
            case alsaNonInterleaved = "alsa-non-interleaved"
            /** --alsa-ignore-chmap */
            case alsaIgnoreChmap = "alsa-ignore-chmap"
        }

        public enum OpenGLRendererOptions: String {
            /** --scale=<filter> */
            case scale
            /** --cscale=<filter> */
            case cscale
            /** --dscale=<filter> */
            case dscale
            /** --tscale=<filter> */
            case tscale
            /** --scale-param1=<value> */
            case scaleParam1 = "scale-param1"
            /** --scale-param2=<value> */
            case scaleParam2 = "scale-param2"
            /** --cscale-param1=<value> */
            case cscaleParam1 = "cscale-param1"
            /** --cscale-param2=<value> */
            case cscaleParam2 = "cscale-param2"
            /** --dscale-param1=<value> */
            case dscaleParam1 = "dscale-param1"
            /** --dscale-param2=<value> */
            case dscaleParam2 = "dscale-param2"
            /** --tscale-param1=<value> */
            case tscaleParam1 = "tscale-param1"
            /** --tscale-param2=<value> */
            case tscaleParam2 = "tscale-param2"
            /** --scale-blur=<value> */
            case scaleBlur = "scale-blur"
            /** --scale-wblur=<value> */
            case scaleWblur = "scale-wblur"
            /** --cscale-blur=<value> */
            case cscaleBlur = "cscale-blur"
            /** --cscale-wblur=<value> */
            case cscaleWblur = "cscale-wblur"
            /** --dscale-blur=<value> */
            case dscaleBlur = "dscale-blur"
            /** --dscale-wblur=<value> */
            case dscaleWblur = "dscale-wblur"
            /** --tscale-blur=<value> */
            case tscaleBlur = "tscale-blur"
            /** --tscale-wblur=<value> */
            case tscaleWblur = "tscale-wblur"
            /** --scale-clamp=<0.0-1.0> */
            case scaleClamp = "scale-clamp"
            /** --cscale-clamp */
            case cscaleClamp = "cscale-clamp"
            /** --dscale-clamp */
            case dscaleClamp = "dscale-clamp"
            /** --tscale-clamp */
            case tscaleClamp = "tscale-clamp"
            /** --scale-cutoff=<value> */
            case scaleCutoff = "scale-cutoff"
            /** --cscale-cutoff=<value> */
            case cscaleCutoff = "cscale-cutoff"
            /** --dscale-cutoff=<value> */
            case dscaleCutoff = "dscale-cutoff"
            /** --scale-taper=<value> */
            case scaleTaper = "scale-taper"
            /** --scale-wtaper=<value> */
            case scaleWtaper = "scale-wtaper"
            /** --dscale-taper=<value> */
            case dscaleTaper = "dscale-taper"
            /** --dscale-wtaper=<value> */
            case dscaleWtaper = "dscale-wtaper"
            /** --cscale-taper=<value> */
            case cscaleTaper = "cscale-taper"
            /** --cscale-wtaper=<value> */
            case cscaleWtaper = "cscale-wtaper"
            /** --tscale-taper=<value> */
            case tscaleTaper = "tscale-taper"
            /** --tscale-wtaper=<value> */
            case tscaleWtaper = "tscale-wtaper"
            /** --scale-radius=<value> */
            case scaleRadius = "scale-radius"
            /** --cscale-radius=<value> */
            case cscaleRadius = "cscale-radius"
            /** --dscale-radius=<value> */
            case dscaleRadius = "dscale-radius"
            /** --tscale-radius=<value> */
            case tscaleRadius = "tscale-radius"
            /** --scale-antiring=<value> */
            case scaleAntiring = "scale-antiring"
            /** --cscale-antiring=<value> */
            case cscaleAntiring = "cscale-antiring"
            /** --dscale-antiring=<value> */
            case dscaleAntiring = "dscale-antiring"
            /** --tscale-antiring=<value> */
            case tscaleAntiring = "tscale-antiring"
            /** --scale-window=<window> */
            case scaleWindow = "scale-window"
            /** --cscale-window=<window> */
            case cscaleWindow = "cscale-window"
            /** --dscale-window=<window> */
            case dscaleWindow = "dscale-window"
            /** --tscale-window=<window> */
            case tscaleWindow = "tscale-window"
            /** --scale-wparam=<window> */
            case scaleWparam = "scale-wparam"
            /** --cscale-wparam=<window> */
            case cscaleWparam = "cscale-wparam"
            /** --tscale-wparam=<window> */
            case tscaleWparam = "tscale-wparam"
            /** --scaler-lut-size=<4..10> */
            case scalerLutSize = "scaler-lut-size"
            /** --scaler-resizes-only */
            case scalerResizesOnly = "scaler-resizes-only"
            /** --linear-scaling */
            case linearScaling = "linear-scaling"
            /** --correct-downscaling */
            case correctDownscaling = "correct-downscaling"
            /** --interpolation */
            case interpolation
            /** --interpolation-threshold=<0..1 */
            case interpolationThreshold = "interpolation-threshold"
            /** --opengl-pbo */
            case openglPbo = "opengl-pbo"
            /** --dither-depth=<N|no|auto> */
            case ditherDepth = "dither-depth"
            /** --dither-size-fruit=<2-8> */
            case ditherSizeFruit = "dither-size-fruit"
            /** --dither=<fruit|ordered|no> */
            case dither
            /** --temporal-dither */
            case temporalDither = "temporal-dither"
            /** --temporal-dither-period=<1-128> */
            case temporalDitherPeriod = "temporal-dither-period"
            /** --opengl-debug */
            case openglDebug = "opengl-debug"
            /** --opengl-swapinterval=<n> */
            case openglSwapinterval = "opengl-swapinterval"
            /** --opengl-shaders=<file-list> */
            case openglShaders = "opengl-shaders"
            /** --opengl-shader=<file> */
            case openglShader = "opengl-shader"
            /** --deband */
            case deband
            /** --deband-iterations=<1..16> */
            case debandIterations = "deband-iterations"
            /** --deband-threshold=<0..4096> */
            case debandThreshold = "deband-threshold"
            /** --deband-range=<1..64> */
            case debandRange = "deband-range"
            /** --deband-grain=<0..4096> */
            case debandGrain = "deband-grain"
            /** --sigmoid-upscaling */
            case sigmoidUpscaling = "sigmoid-upscaling"
            /** --sigmoid-center */
            case sigmoidCenter = "sigmoid-center"
            /** --sigmoid-slope */
            case sigmoidSlope = "sigmoid-slope"
            /** --sharpen=<value> */
            case sharpen
            /** --opengl-glfinish */
            case openglGlfinish = "opengl-glfinish"
            /** --opengl-waitvsync */
            case openglWaitvsync = "opengl-waitvsync"
            /** --opengl-vsync-fences=<N> */
            case openglVsyncFences = "opengl-vsync-fences"
            /** --opengl-dwmflush=<no|windowed|yes|auto> */
            case openglDwmflush = "opengl-dwmflush"
            /** --angle-d3d11-feature-level=<11_0|10_1|10_0|9_3> */
            case angleD3d11FeatureLevel = "angle-d3d11-feature-level"
            /** --angle-d3d11-warp=<yes|no|auto> */
            case angleD3d11Warp = "angle-d3d11-warp"
            /** --angle-egl-windowing=<yes|no|auto> */
            case angleEglWindowing = "angle-egl-windowing"
            /** --angle-flip=<yes|no> */
            case angleFlip = "angle-flip"
            /** --angle-max-frame-latency=<1-16> */
            case angleMaxFrameLatency = "angle-max-frame-latency"
            /** --angle-renderer=<d3d9|d3d11|auto> */
            case angleRenderer = "angle-renderer"
            /** --angle-swapchain-length=<2-16> */
            case angleSwapchainLength = "angle-swapchain-length"
            /** --cocoa-force-dedicated-gpu=<yes|no> */
            case cocoaForceDedicatedGpu = "cocoa-force-dedicated-gpu"
            /** --opengl-sw */
            case openglSw = "opengl-sw"
            /** --opengl-backend=<sys> */
            case openglBackend = "opengl-backend"
            /** --opengl-es=<mode> */
            case openglEs = "opengl-es"
            /** --opengl-fbo-format=<fmt> */
            case openglFboFormat = "opengl-fbo-format"
            /** --opengl-gamma=<0.1..2.0> */
            case openglGamma = "opengl-gamma"
            /** --gamma-auto */
            case gammaAuto = "gamma-auto"
            /** --target-prim=<value> */
            case targetPrim = "target-prim"
            /** --target-trc=<value> */
            case targetTrc = "target-trc"
            /** --tone-mapping=<value> */
            case toneMapping = "tone-mapping"
            /** --tone-mapping-param=<value> */
            case toneMappingParam = "tone-mapping-param"
            /** --hdr-compute-peak */
            case hdrComputePeak = "hdr-compute-peak"
            /** --tone-mapping-desaturate=<value> */
            case toneMappingDesaturate = "tone-mapping-desaturate"
            /** --gamut-warning */
            case gamutWarning = "gamut-warning"
            /** --use-embedded-icc-profile */
            case useEmbeddedIccProfile = "use-embedded-icc-profile"
            /** --icc-profile=<file> */
            case iccProfile = "icc-profile"
            /** --icc-profile-auto */
            case iccProfileAuto = "icc-profile-auto"
            /** --icc-cache-dir=<dirname> */
            case iccCacheDir = "icc-cache-dir"
            /** --icc-intent=<value> */
            case iccIntent = "icc-intent"
            /** --icc-3dlut-size=<r>x<g>x<b> */
            case icc3dlutSize = "icc-3dlut-size"
            /** --icc-contrast=<0-100000> */
            case iccContrast = "icc-contrast"
            /** --blend-subtitles=<yes|video|no> */
            case blendSubtitles = "blend-subtitles"
            /** --alpha=<blend-tiles|blend|yes|no> */
            case alpha
            /** --opengl-rectangle-textures */
            case openglRectangleTextures = "opengl-rectangle-textures"
            /** --background=<color> */
            case background
            /** --opengl-tex-pad-x */
            case openglTexPadX = "opengl-tex-pad-x"
            /** --opengl-tex-pad-y */
            case openglTexPadY = "opengl-tex-pad-y"
            /** --opengl-early-flush=<yes|no|auto> */
            case openglEarlyFlush = "opengl-early-flush"
            /** --opengl-dumb-mode=<yes|no|auto> */
            case openglDumbMode = "opengl-dumb-mode"
            /** --opengl-shader-cache-dir=<dirname> */
            case openglShaderCacheDir = "opengl-shader-cache-dir"
            /** --cuda-decode-device=<auto|0..> */
            case cudaDecodeDevice = "cuda-decode-device"
        }

        public enum Miscellaneous: String {
            /** --display-tags=tag1 */
            case displayTags = "display-tags"
            /** --mc=<seconds/frame> */
            case mc
            /** --autosync=<factor> */
            case autosync
            /** --video-sync=<audio|...> */
            case videoSync = "video-sync"
            /** --video-sync-max-video-change=<value> */
            case videoSyncMaxVideoChange = "video-sync-max-video-change"
            /** --video-sync-max-audio-change=<value> */
            case videoSyncMaxAudioChange = "video-sync-max-audio-change"
            /** --video-sync-adrop-size=<value> */
            case videoSyncAdropSize = "video-sync-adrop-size"
            /** --mf-fps=<value> */
            case mfFps = "mf-fps"
            /** --mf-type=<value> */
            case mfType = "mf-type"
            /** --stream-dump=<destination-filename> */
            case streamDump = "stream-dump"
            /** --stream-lavf-o=opt1=value1 */
            case streamLavfO = "stream-lavf-o"
            /** --vo-mmcss-profile=<name> */
            case voMmcssProfile = "vo-mmcss-profile"
            /** --priority=<prio> */
            case priority
            /** --force-media-title=<string> */
            case forceMediaTitle = "force-media-title"
            /** --external-files=<file-list> */
            case externalFiles = "external-files"
            /** --external-file=<file> */
            case externalFile = "external-file"
            /** --autoload-files=<yes|no> */
            case autoloadFiles = "autoload-files"
            /** --record-file=<file> */
            case recordFile = "record-file"
            /** --lavfi-complex=<string> */
            case lavfiComplex = "lavfi-complex"
        }

    }
}
